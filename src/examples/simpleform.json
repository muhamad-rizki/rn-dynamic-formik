{
  "id": 1,
  "name": "FRM001e",
  "description": "Beneficiary Schema",
  "type": "object",
  "config": {
      "titles": "Main\nBeneficiary",
      "baseTitles": [
          "Select Person",
          "Personal",
          "Benefit Calculation"
      ]
  },
  "properties": {
      "beneficiary": {
          "isRequired": true,
          "type": "object",
          "isRoot": true,
          "title": "Who is the Beneficiary?",
          "customTemplate": "QWizardContainer",
          "properties": {
              "beneficiaryperson": {
                  "type": "string",
                  "title": "Beneficiary person",
                  "customTemplate": "QDropdownSchema",
                  "disabled": true,
                  "enum": [
                      "New user"
                  ],
                  "nullOption": {
                      "value": "",
                      "text": "--Select--"
                  },
                  "isCollapsed": false,
                  "isRequired": true,
                  "config": {
                      "contdesc": "beneficiary_person"
                  },
                  "events": {
                      "onLoad": {
                          "handler": "handlers.proceduralHandler",
                          "args": {
                              "steps": [
                                  {
                                      "handler": "handlers.inlineHandler",
                                      "args": {
                                          "script": "const currentKey = container.props.storageKey;globalAction.setGlobalVariable('storageKey', container.props.storageKey);const keys = Object.keys(globalAction.getAllValue().asObject()).filter(k => k.indexOf('$FRM001e$beneficiary') >= 0);if(keys.length <= 0 || keys.filter(m => m.indexOf(currentKey.split('$')[0]) >= 0).length <= 0){    keys.push(currentKey.split('$')[0] + '$FRM001e$beneficiary');}let unlocked = [];let locked = [];let sumLocked = 0;keys.forEach(k => {    let storeKey = k;    if(globalAction.getFieldValue(storeKey, 'beneficiary.benefitcalculationlock') !== 'true'){        unlocked.push(storeKey);    } else {        locked.push(storeKey);    }});if(locked.length === 0 && unlocked.length === 1){    globalAction.changeFieldValue(currentKey + '.beneficiary.benefitcalculation', '100.00');    globalAction.changeFieldValue(currentKey + '.beneficiary.benefitcalculationlock', 'false');    globalAction.commitChanges();    return null;}locked.forEach((key) => {    sumLocked += isNaN(parseFloat(globalAction.getFieldValue(key, 'beneficiary.benefitcalculation'))) ? 0 : parseFloat(globalAction.getFieldValue(key, 'beneficiary.benefitcalculation'));});let theRest = parseFloat(100.00) - parseFloat(sumLocked);let newValues = [];unlocked.forEach((key) => {    newValues.push((theRest / parseFloat(unlocked.length)).toFixed(2));});let finalTotal = parseFloat(newValues.reduce((a,b) => parseFloat(a) + parseFloat(b), 0)) + parseFloat(sumLocked);let lastValue = newValues[newValues.length - 1];if(finalTotal > 100.00){    newValues[newValues.length - 1] = parseFloat(lastValue - (finalTotal - 100.0)).toFixed(2);}else if(finalTotal < 100.00){    newValues[newValues.length - 1] = (parseFloat(lastValue) + (100.0 - finalTotal)).toFixed(2);}unlocked.forEach((key, index) => {    globalAction.changeFieldValue(key + '.beneficiary.benefitcalculation', newValues[index]);    globalAction.changeFieldValue(key + '.beneficiary.benefitcalculationlock', 'false');});globalAction.commitChanges();"
                                      }
                                  },
                                  {
                                      "handler": "handlers.updateSchema",
                                      "args": {
                                          "path": "properties.beneficiary.properties.beneficiaryperson.enum",
                                          "type": "set",
                                          "value": "${['New user'].concat(globalAction.findAllByPath('*.personal.fullname')).filter(function(e){return e;})}"
                                      }
                                  }
                              ]
                          }
                      },
                      "onFieldValueChanged": {
                          "handler": "handlers.proceduralHandler",
                          "args": {
                              "steps": [
                                  {
                                      "handler": "handlers.conditionalHandler",
                                      "args": {
                                          "handlers": [
                                              {
                                                  "when": "${globalAction.getFieldValue(container.props.storageKey,'beneficiary.beneficiaryperson')=='New user'}",
                                                  "handler": "handlers.inlineHandler",
                                                  "args": {
                                                      "script": "globalAction.removeFieldValue(container.props.storageKey.replace('beneficiary', 'personal'));globalAction.commitChanges();"
                                                  }
                                              },
                                              {
                                                  "when": "${globalAction.getFieldValue(container.props.storageKey,'beneficiary.beneficiaryperson')!='New user'}",
                                                  "handler": "handlers.inlineHandler",
                                                  "args": {
                                                      "script": "var datas = globalAction.getAllValue().asObject();var availableKeys = container.props.schemas[1].properties['personal'].properties;for(var key in datas){if(datas[key].personal && datas[key].personal.fullname){if(globalAction.getFieldValue(container.props.storageKey, 'beneficiary.beneficiaryperson') == datas[key].personal.fullname){for(var mKey in datas[key].personal){if(availableKeys[mKey]){if(typeof datas[key].personal[mKey] == 'object') {for(var sKey in datas[key].personal[mKey]){globalAction.copyValue(key + '.personal.' + mKey + '.' + sKey, container.props.storageKey.replace('beneficiary', 'personal') + '.personal.' + mKey + '.' + sKey)}} else {globalAction.copyValue(key + '.personal.' + mKey, container.props.storageKey.replace('beneficiary', 'personal') + '.personal.' + mKey)}}}}}};globalAction.commitChanges()"
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              ]
                          }
                      }
                  }
              },
              "benefitcalculation": {
                  "customTemplate": "QTextInputSchema",
                  "type": "string",
                  "title": " ",
                  "isRequired": false,
                  "config": {
                      "isHidden": true
                  }
              },
              "benefitcalculationlock": {
                  "customTemplate": "QTextInputSchema",
                  "type": "string",
                  "title": " ",
                  "isRequired": false,
                  "config": {
                      "isHidden": true
                  }
              }
          }
      },
      "personal": {
          "isRequired": true,
          "type": "object",
          "title": " ",
          "isRoot": true,
          "properties": {
              "fullname": {
                  "customTemplate": "QTextInputAutocomplete",
                  "type": "string",
                  "title": "Full name",
                  "isRequired": true,
                  "help": "*will be suggested from data lead if there are any",
                  "maxLength": 40,
                  "events": {
                      "autoCompleteForm": {
                          "handler": "handlers.autoCompleteForm",
                          "args": {
                              "value": "${value}",
                              "container": "${container}",
                              "form": "${form}"
                          }
                      },
                      "onFieldValueChanged": {
                          "handler": "handlers.inlineHandler",
                          "args": {
                              "script": "globalAction.changeFieldValue(container.props.storageKey.replace('personal', 'beneficiary') + '.beneficiary.beneficiaryperson', globalAction.getFieldValue(container.props.storageKey,'personal.fullname'))"
                          }
                      }
                  }
              },
              "sex": {
                  "customTemplate": "QRadioSchema",
                  "type": "string",
                  "title": "Sex",
                  "isRequired": true,
                  "enum": [
                      "Male",
                      "Female"
                  ]
              },
              "dateofbirth": {
                  "customTemplate": "QDatePickerNote",
                  "config": {
                      "titleNotesDate": "Note:",
                      "contentNotesDate": "Age of beneficiaries below 17 years. Additional questions regarding parental respresentative data will be added",
                      "maxDate": false,
                      "minDate": true
                  },
                  "type": "string",
                  "title": "Date of birth",
                  "isRequired": true,
                  "events": {
                      "onFieldValueChanged": {
                          "handler": "handlers.proceduralHandler",
                          "args": {
                              "steps": [
                                  {
                                      "handler": "handlers.hideSchema",
                                      "args": {
                                          "path": "properties.personal.properties.representative",
                                          "value": "${Math.abs(Math.round((((new Date(globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[2], globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[1] - 1, globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[0]).getTime() - new Date().getTime()) / 1000) / (60 * 60 * 24)) / 365.25)) <= 17 ? false : true}"
                                      }
                                  },
                                  {
                                      "handler": "handlers.inlineHandler",
                                      "args": {
                                          "script": "let isHidden = Math.abs(Math.round((((new Date(globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[2], globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[1] - 1, globalAction.getFieldValue(container.props.storageKey,'personal.dateofbirth').split(' - ')[0]).getTime() - new Date().getTime()) / 1000) / (60 * 60 * 24)) / 365.25)) <= 17 ? false : true;if(isHidden){globalAction.removeFieldValue(container.props.storageKey + '.personal.representative');}globalAction.commitChanges();"
                                      }
                                  }
                              ]
                          }
                      }
                  }
              },
              "relationsmain": {
                  "type": "string",
                  "title": "Relationship with main insured",
                  "customTemplate": "QSelectBoxSchema",
                  "disabled": false,
                  "enum": [
                      "Child",
                      "Brother",
                      "Sister",
                      "Other"
                  ],
                  "nullOption": {
                      "value": "",
                      "text": "--Select--"
                  },
                  "isCollapsed": false,
                  "isRequired": true,
                  "events": {
                      "onFieldValueChanged": {
                          "handler": "handlers.proceduralHandler",
                          "args": {
                              "steps": [
                                  {
                                      "handler": "handlers.hideSchema",
                                      "args": {
                                          "path": "properties.personal.properties.otherrelationsmain",
                                          "value": "${(globalAction.getFieldValue(container.props.storageKey,'personal.relationsmain') != 'Other') ? true : false}"
                                      }
                                  },
                                  {
                                      "handler": "handlers.inlineHandler",
                                      "args": {
                                          "script": "let isHidden = globalAction.getFieldValue(container.props.storageKey,'personal.relationsmain') !== 'Other';if(isHidden){globalAction.removeFieldValue(container.props.storageKey + '.personal.otherrelationsmain');}globalAction.commitChanges();"
                                      }
                                  }
                              ]
                          }
                      }
                  }
              },
              "otherrelationsmain": {
                  "customTemplate": "QTextInputSchema",
                  "type": "string",
                  "title": "Other relation with main insured",
                  "isRequired": true,
                  "maxLength": 20,
                  "minLength": 2,
                  "config": {
                      "isHidden": true,
                      "customError": "Cannot be less than 2 characters."
                  }
              },
              "representative": {
                  "isRequired": true,
                  "type": "object",
                  "title": "Parent Representative",
                  "customTemplate": "QNotes",
                  "config": {
                      "isHidden": true,
                      "titleNotes": "Note:",
                      "contentNotes": "1. One(1) parent respresentative applies to all beneficiaries under the age of 17\n\n2. Each change of data on the parent representative group form will change all form of parental representation in all registered beneficiaries"
                  },
                  "properties": {
                      "fullname": {
                          "customTemplate": "QTextInputSchema",
                          "type": "string",
                          "title": "Full name",
                          "isRequired": true
                      },
                      "sex": {
                          "customTemplate": "QRadioSchema",
                          "type": "string",
                          "title": "Sex",
                          "isRequired": true,
                          "enum": [
                              "Male",
                              "Female"
                          ]
                      },
                      "date": {
                          "config": {
                              "maxDate": false,
                              "minDate": true
                          },
                          "customTemplate": "QDatePicker",
                          "type": "string",
                          "title": "Date of birth",
                          "isRequired": true
                      },
                      "relationsprospective": {
                          "type": "string",
                          "title": "Relationship with prospective beneficiaries",
                          "customTemplate": "QSelectBoxSchema",
                          "disabled": false,
                          "enum": [
                              "Mother / Father",
                              "Child",
                              "Siblings",
                              "Husband / wife",
                              "Grandparents",
                              "Grandchild / Great-grandson",
                              "Uncle / Aunt",
                              "Nephew",
                              "Employer",
                              "Employee",
                              "Other"
                          ],
                          "nullOption": {
                              "value": "",
                              "text": "--Select--"
                          },
                          "isCollapsed": false,
                          "isRequired": true,
                          "events": {
                              "onFieldValueChanged": {
                                  "handler": "handlers.proceduralHandler",
                                  "args": {
                                      "steps": [
                                          {
                                              "handler": "handlers.hideSchema",
                                              "args": {
                                                  "path": "properties.personal.properties.representative.properties.otherrelationsprospective",
                                                  "value": "${(globalAction.getFieldValue(container.props.storageKey,'personal.representative.relationsprospective') != 'Other') ? true : false}"
                                              }
                                          },
                                          {
                                              "handler": "handlers.inlineHandler",
                                              "args": {
                                                  "script": "var isHidden = globalAction.getFieldValue(container.props.storageKey,'personal.representative.relationprospective') !== 'Other';if(isHidden){    globalAction.removeFieldValue(container.props.storageKey + '.personal.representative.otherrelationsprospective');}globalAction.commitChanges();"
                                              }
                                          }
                                      ]
                                  }
                              }
                          }
                      },
                      "otherrelationsprospective": {
                          "customTemplate": "QTextInputSchema",
                          "type": "string",
                          "title": "Other relationship with prospective beneficiaries",
                          "isRequired": true,
                          "maxLength": 20,
                          "minLength": 2,
                          "config": {
                              "isHidden": true,
                              "customError": "Cannot be less than 2 characters."
                          }
                      }
                  }
              }
          }
      }
  }
}